services:
  postgres:
    image: postgres:15-alpine
    container_name: products-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-produtos_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - products-network

  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: products-api
    restart: unless-stopped
    ports:
      - "${PORT:-3001}:${PORT:-3001}"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-produtos_db}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-7d}
      PORT: ${PORT:-3001}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./src:/app/src:delegated
      - ./prisma:/app/prisma:delegated
      - /app/node_modules
      - ./package.json:/app/package.json:delegated
      - ./package-lock.json:/app/package-lock.json:delegated
      - /app/node_modules
    networks:
      - products-network
    # Removido o command que estava causando o problema

  adminer:
    image: adminer:latest
    container_name: products-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - products-network

volumes:
  postgres_data:
    driver: local

networks:
  products-network:
    driver: bridge